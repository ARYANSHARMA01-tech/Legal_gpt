from crewai import Agent
import re
from langchain_core.language_models.chat_models import BaseChatModel
from crewai import LLM
from search_tool import SearchTools
from BrowserTool import BrowserTools

class LegalAgents():
    def __init__(self, llm: BaseChatModel = None):
        if llm is None:
            llm = LLM(model="groq/llama-3.3-70b-versatile",api_key=os.environ.get("GROQ_API_KEY"))
        else:
            self.llm = llm

        self.search_tool = SearchTools()

    def user_query_agent(self):
        return Agent(
            role='User Query Agent',
            goal='Understand and classify the user\'s legal question â€” whether it\'s for case law summary, act interpretation, form help, or general query answering.',
            backstory='This agent acts as the entry point of LegalGPT. It classifies the user\'s input and sends it for the appropriate task.',
            tools=[self.search_tool,self.browser_tool],
            allow_delegation=False,
            llm=self.llm,
            verbose=True
        )

    def doc_retrieval_agent(self):
        return Agent(
            role='Document Retrieval Agent',
            goal='Retrieve the most relevant legal documents, acts, or case law using search or vector similarity techniques based on the user\'s query context.',
            backstory='This agent is responsible for querying the knowledge base and retrieving high-confidence documents.',
            tools=[self.search_tool,self.browser_tool],
            allow_delegation=False,
            llm=self.llm,
            verbose=True
        )

    def legal_analysis_agent(self):
        return Agent(
            role='Legal Analysis Agent',
            goal='Analyze the retrieved documents and extract insights or answers that help in solving the user\'s legal issue.',
            backstory='Expert in legal reasoning and interpretation of legal texts.',
            tools=[self.search_tool,self.browser_tool],
            allow_delegation=False,
            llm=self.llm,
            verbose=True
        )

    def drafting_agent(self):
        return Agent(
            role='Legal Drafting Agent',
            goal='Draft replies, summaries, legal notices, or help fill out forms like RTIs or complaints.',
            backstory='Skilled in writing legally accurate and citizen-friendly documents.',
            tools=[self.search_tool,self.browser_tool],
            allow_delegation=False,
            llm=self.llm,
            verbose=True
        )

    def validator_agent(self):
        return Agent(
            role='Output Validator Agent',
            goal='Verify the factual and legal correctness of the response or draft generated by other agents.',
            backstory='Performs a final check to ensure trustworthiness and correctness.',
            tools=[self.search_tool,self.browser_tool],
            allow_delegation=False,
            llm=self.llm,
            verbose=True
        )

    def orchestration_agent(self):
        return Agent(
            role='Orchestration Agent',
            goal='Coordinate the flow between agents based on the user\'s request type and response requirements.',
            backstory='Main conductor of LegalGPT\'s multi-agent system, deciding which agents to trigger and in what order.',
            tools=[self.search_tool,self.browser_tool],
            allow_delegation=True,
            llm=self.llm,
            verbose=True
        )

